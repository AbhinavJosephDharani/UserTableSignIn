// 1. CREATE TABLE (Collection Creation)
db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["username", "password", "firstname", "lastname", "salary", "age"],
      properties: {
        username: { bsonType: "string", maxLength: 50 },
        password: { bsonType: "string", maxLength: 100 },
        firstname: { bsonType: "string", maxLength: 50 },
        lastname: { bsonType: "string", maxLength: 50 },
        salary: { bsonType: "number", minimum: 0 },
        age: { bsonType: "int", minimum: 0, maximum: 150 },
        registerday: { bsonType: "date" },
        signintime: { bsonType: ["date", "null"] }
      }
    }
  }
});


// 2. USER REGISTRATION
db.users.insertOne({
  username: "john_doe",
  password: "$2a$10$hashedPassword",
  firstname: "John",
  lastname: "Doe",
  salary: 75000.50,
  age: 30,
  registerday: new Date(),
  signintime: null
});


// 3. USER SIGN-IN
db.users.findOneAndUpdate(
  { username: "john_doe" },
  { $set: { signintime: new Date() } },
  { returnDocument: "after" }
);


// 4. SEARCH USERS BY FIRST AND/OR LAST NAME
db.users.find(
  { firstname: { $regex: "John", $options: "i" } },
  { password: 0 }
);

db.users.find(
  { lastname: { $regex: "Doe", $options: "i" } },
  { password: 0 }
);

db.users.find(
  {
    firstname: { $regex: "John", $options: "i" },
    lastname: { $regex: "Doe", $options: "i" }
  },
  { password: 0 }
);


// 5. SEARCH USERS BY USERID (USERNAME)
db.users.findOne(
  { username: "john_doe" },
  { password: 0 }
);


// 6. SEARCH USERS BY SALARY RANGE
db.users.find(
  { salary: { $gte: 50000, $lte: 100000 } },
  { password: 0 }
);


// 7. SEARCH USERS BY AGE RANGE
db.users.find(
  { age: { $gte: 25, $lte: 65 } },
  { password: 0 }
);


// 8. SEARCH USERS WHO REGISTERED AFTER JOHN
var john = db.users.findOne({ username: "john" });
var johnRegisterDate = john.registerday;
db.users.find(
  { registerday: { $gt: johnRegisterDate } },
  { password: 0 }
);


// 9. SEARCH USERS WHO NEVER SIGNED IN
db.users.find(
  { signintime: null },
  { password: 0 }
);


// 10. SEARCH USERS WHO REGISTERED ON SAME DAY AS JOHN
var john = db.users.findOne({ username: "john" });
var johnRegisterDate = john.registerday;
var startOfDay = new Date(johnRegisterDate);
startOfDay.setHours(0, 0, 0, 0);
var endOfDay = new Date(johnRegisterDate);
endOfDay.setHours(23, 59, 59, 999);
db.users.find(
  { registerday: { $gte: startOfDay, $lte: endOfDay } },
  { password: 0 }
);


// 11. SEARCH USERS WHO REGISTERED TODAY
var today = new Date();
var startOfDay = new Date(today);
startOfDay.setHours(0, 0, 0, 0);
var endOfDay = new Date(today);
endOfDay.setHours(23, 59, 59, 999);
db.users.find(
  { registerday: { $gte: startOfDay, $lte: endOfDay } },
  { password: 0 }
);


// 12. GET ALL USERS
db.users.find({}, { password: 0 });


// 13. COUNT USERS
db.users.countDocuments();


// 14. UPDATE USER INFORMATION
db.users.updateOne(
  { username: "john_doe" },
  { $set: { salary: 80000, age: 31 } }
);


// 15. DELETE USER
db.users.deleteOne({ username: "john_doe" });


// 16. CREATE INDEXES FOR PERFORMANCE
db.users.createIndex({ username: 1 }, { unique: true });
db.users.createIndex({ firstname: 1 });
db.users.createIndex({ lastname: 1 });
db.users.createIndex({ salary: 1 });
db.users.createIndex({ age: 1 });
db.users.createIndex({ registerday: 1 });
db.users.createIndex({ signintime: 1 });


// 17. AGGREGATION QUERIES
db.users.aggregate([
  {
    $group: {
      _id: null,
      totalUsers: { $sum: 1 },
      avgSalary: { $avg: "$salary" },
      avgAge: { $avg: "$age" },
      maxSalary: { $max: "$salary" },
      minSalary: { $min: "$salary" }
    }
  }
]);

db.users.aggregate([
  {
    $group: {
      _id: { $month: "$registerday" },
      count: { $sum: 1 },
      users: { $push: { firstname: "$firstname", lastname: "$lastname" } }
    }
  },
  { $sort: { _id: 1 } }
]);

db.users.aggregate([
  {
    $match: {
      signintime: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    }
  },
  {
    $project: {
      username: 1,
      firstname: 1,
      lastname: 1,
      signintime: 1,
      daysSinceSignIn: {
        $divide: [
          { $subtract: [new Date(), "$signintime"] },
          1000 * 60 * 60 * 24
        ]
      }
    }
  }
]);